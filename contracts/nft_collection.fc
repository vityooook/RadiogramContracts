#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";

global slice owner; ;; 267
global slice second_owner; ;; 267

global int last_index; ;; 32
global int available; ;; 1
global int price_x2; ;; 124
global int price_ticket; ;; 124
global int limit_x2; ;; 32 
global int limit_ticket; ;; 32
global int sale_x2; ;; 32
global int sale_ticket; ;; 32
global cell nft_item_code; ;; ref
global cell royalty_params; ;; ref

global cell content_collection; ;; ref
global cell content_item_x2; ;; ref 
global cell content_item_ticket; ;; ref

;; errors
const int error::sale_close = 800;
const int error::not_enough_ton = 801;
const int error::sale_all_nft = 802;
const int error::not_owner = 803;
const int error::incorrect_index = 804;

() load_data() impure inline {
    var ds = get_data().begin_parse(); ;; Bits = 267 + 267 + 32 + 1 + 124 + 124 + 32 + 32 + 32 +32 = 879. Refs = 3
    owner = ds~load_msg_addr();
    second_owner = ds~load_msg_addr();
    last_index = ds~load_uint(32);
    available = ds~load_int(1);
    price_x2 = ds~load_coins();
    price_ticket = ds~load_coins();
    limit_x2 = ds~load_uint(32);
    limit_ticket = ds~load_uint(32);
    sale_x2 = ds~load_uint(32);
    sale_ticket = ds~load_uint(32);
    nft_item_code = ds~load_ref();
    royalty_params = ds~load_ref();

    var ds2 = ds~load_ref().begin_parse(); ;; Bits = 0. Refs = 3
    content_collection = ds2~load_ref();
    content_item_x2 = ds2~load_ref();
    content_item_ticket = ds2~load_ref();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(owner)
            .store_slice(second_owner)
            .store_uint(last_index, 32)
            .store_int(available, 1)
            .store_coins(price_x2)
            .store_coins(price_ticket)
            .store_uint(limit_x2, 32)
            .store_uint(limit_ticket, 32)
            .store_uint(sale_x2, 32)
            .store_uint(sale_ticket, 32)
            .store_ref(nft_item_code)
            .store_ref(royalty_params)
            .store_ref(
                begin_cell()
                    .store_ref(content_collection)
                    .store_ref(content_item_x2)
                    .store_ref(content_item_ticket)
                .end_cell()
            )
        .end_cell()
    );
}


cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
                        .store_int(wc, 8)
                        .store_uint(cell_hash(state_init), 256)
                        .end_cell()
                        .begin_parse();
    }

() deploy_nft_item(int item_index, cell nft_item_code, cell content, slice sender_address) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_address)
                .store_coins(30000000)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(begin_cell()
                    .store_slice(sender_address)
                    .store_slice(second_owner)
                    .store_ref(content)
                    .end_cell());
    send_raw_message(msg.end_cell(), 1); 
}

() send_message(slice destination_address, int amount, builder payload, int send_mode) impure { ;; тут нужно поработать 
    var msg_body = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(destination_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    
    if (~ builder_null?(payload)) {
        msg_body = msg_body.store_builder(payload);
    }

    send_raw_message(msg_body.end_cell(), send_mode);
} 

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }
    
    if (op == 1) { ;; buy nft 
        throw_unless(error::sale_close, available);

        int nft_type = in_msg_body~load_uint(1);

        if (nft_type == 1) { ;; deploy x2 nft
            throw_unless(error::not_enough_ton, msg_value >= price_x2);
            throw_unless(error::sale_all_nft, sale_x2 < limit_x2);

            deploy_nft_item(last_index, nft_item_code, content_item_x2, sender_address);
            sale_x2 += 1;
            last_index += 1;

            builder payload = begin_cell().store_uint(0, 32).store_slice("NFT purchase will be a success ✅");
            send_message(sender_address, 1000000, payload, 1); ;; message to buyer

            raw_reserve(50000000, 0); ;; 0.05 TON
            send_message(owner, 0, null(), 128); ;; Payments to the owner
            save_data();
        } else {
            throw_unless(error::not_enough_ton, msg_value >= price_ticket);
            throw_unless(error::sale_all_nft, sale_ticket < limit_ticket);

            deploy_nft_item(last_index, nft_item_code, content_item_ticket, sender_address);
            sale_ticket += 1;
            last_index += 1;

            builder payload = begin_cell().store_uint(0, 32).store_slice("NFT purchase will be a success ✅");
            send_message(sender_address, 1000000, payload, 1); ;; message to buyer

            raw_reserve(50000000, 0); ;; 0.05 TON
            send_message(owner, 0, null(), 128); ;; Payments to the owner
            save_data();
        }
        return ();
    }

    throw_unless(error::not_owner, (equal_slices(sender_address, owner) | equal_slices(sender_address, second_owner)));

    if (op == 2) { ;; deploy new nft
        int item_index = in_msg_body~load_uint(32);
        slice future_owner = in_msg_body~load_msg_addr();
        cell content = in_msg_body~load_ref();

        if (item_index == 0) {
            deploy_nft_item(last_index, nft_item_code, content, future_owner);
            last_index += 1;
            save_data();
        } else {
            throw_unless(error::incorrect_index, item_index <= last_index);
            var is_last = item_index == last_index;
            deploy_nft_item(last_index, nft_item_code, content, future_owner);
            if (is_last) {
                last_index += 1;
                save_data();
            }
        }
        return ();
    }

    if (op == 3) {
        available = in_msg_body~load_int(1);
        price_x2 = in_msg_body~load_coins();
        price_ticket = in_msg_body~load_coins();
        limit_x2 = in_msg_body~load_uint(32);
        limit_ticket = in_msg_body~load_uint(32);
        save_data();
        return ();
    }

    if (op == 4) {
        owner = in_msg_body~load_msg_addr();
        second_owner = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == 5) { ;; return collection balance
      var msg = begin_cell()
              .store_uint(0x18, 6)
              .store_slice(owner)
              .store_coins(0)
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
      raw_reserve(10000000, 0); ;; 0.01 TON
      send_raw_message(msg.end_cell(), 128); ;; return all non reserve balance
      return ();
    }

    if (op == 6) {
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  load_data();
  slice cs = content_collection.begin_parse();
  return (last_index, cs~load_ref(), owner);
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  load_data();
  slice cs = content_collection.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

;;; нужно доработать 
(slice, slice, int, int, int, int, int, int, int, int, cell, cell, cell) get_all_information() method_id {
  load_data();
  slice cs = content_collection.begin_parse();
  return (
    owner, ;; slice
    second_owner, ;; slice 
    last_index, ;; int
    available, ;; int 
    price_x2, ;; int 
    price_ticket, ;; int
    limit_x2, ;; int 
    limit_ticket, ;; int 
    sale_x2, ;; int
    sale_ticket, ;; int
    cs~load_ref(), ;; cell content_collection
    content_item_x2, ;; cell
    content_item_ticket ;; cell 
  );
}